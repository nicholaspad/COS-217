Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Nicholas Padmanabhan

------------------------------------------------------------------------
How many late days are you using on this assignment?

0

------------------------------------------------------------------------
What authorized sources of information did you use to complete
the assignment? COPY THE LIST of authorized sources of information
given in the "Policies" web page to this section of the readme file,
and edit it as appropriate.

The course's lectures.
The course's precepts.
The course's website.
The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

Very fun. It was definitely challenging implementing the expansion
scheme (segfault: you hate to see it).

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

None

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

symtablelist.c: (in function SymTable_map)
symtablelist.c:189:3: Statement has no effect: pfApply(curr->ke...
  Statement has no visible effect --- no values are modified. (Use
  -noeffect to inhibit warning)

Disagree with this warning because pfApply() itself will never have a
"visible" effect to splint; only the client knows what that effect will
be. For instance, pvValue may be modified (invisibly) within pfApply().
Also, since its return type is void, it cannot be used to directly 
modify a value through the assignment operator.

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 65: medium priority:
Do you want to validate 'pvValue' through an assert?

Disagree with this warning because pvValue may be a pointer to anything,
including NULL. No assert() is needed.

symtablelist.c: line 102: medium priority:
Do you want to validate 'pvValue' through an assert?

Disagree with this warning because pvValue may be a pointer to anything,
including NULL. No assert() is needed.

symtablelist.c: line 181: medium priority:
Do you want to validate 'pvExtra' through an assert?

Disagree with this warning because pvExtra may be a pointer to anything,
including NULL. No assert() is needed.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

symtablehash.c: (in function SymTable_map)
symtablehash.c:353:4: Statement has no effect: pfApply(curr->ke...
  Statement has no visible effect --- no values are modified. (Use
  -noeffect to inhibit warning)

Disagree with this warning because pfApply() itself will never have a
"visible" effect to splint; only the client knows what that effect will
be. For instance, pvValue may be modified (invisibly) within pfApply().
Also, since its return type is void, it cannot be used to directly 
modify a value through the assignment operator.

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablehash.c: line 201: medium priority:
Do you want to validate 'pvValue' through an assert?

Disagree with this warning because pvValue may be a pointer to anything,
including NULL. No assert() is needed.

symtablehash.c: line 247: medium priority:
Do you want to validate 'pvValue' through an assert?

Disagree with this warning because pvValue may be a pointer to anything,
including NULL. No assert() is needed.

symtablehash.c: line 342: medium priority:
Do you want to validate 'pvExtra' through an assert?

Disagree with this warning because pvExtra may be a pointer to anything,
including NULL. No assert() is needed.

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.010000 seconds.
-- 5000 bindings consumed 1.010000 seconds.
-- 50000 bindings consumed 99.540000 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.010000 seconds.
-- 50000 bindings consumed 0.380000 seconds.
-- 500000 bindings consumed 67.810000 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.020000 seconds.
-- 50000 bindings consumed 0.210000 seconds.
-- 500000 bindings consumed 2.030000 seconds.
